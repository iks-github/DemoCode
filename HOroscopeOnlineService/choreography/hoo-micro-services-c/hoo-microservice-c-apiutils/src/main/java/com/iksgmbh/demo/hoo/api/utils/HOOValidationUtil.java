package com.iksgmbh.demo.hoo.api.utils;

import java.io.File;
import java.io.FileNotFoundException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.util.JAXBSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;

import org.xml.sax.ErrorHandler;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import com.iksgmbh.demo.hoo.api.utils.HOOServiceException.HOOErrorType;


/**
 * Util to validate a string representation for objects that are build from 
 * java classes generated by JAXB using the object definitions of a xsd file. 
 * 
 * @author Reik Oberrath
 */
public class HOOValidationUtil {

	
	private static final Logger LOGGER = Logger.getLogger(HOOValidationUtil.class.getName());
	private static final SchemaFactory SCHEMA_FACTORY = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
	private static File XSD_FILE; 

	public static void validateContractObject(String objectName,  Object jaxbObject) throws HOOServiceException
	{
		if (jaxbObject == null) {
			throw new HOOServiceException("Object must not be null.", HOOErrorType.INVALID_INPUT, objectName);			
		}
		
	    try {
	    	final JAXBContext jaxbContext = JAXBContext.newInstance(jaxbObject.getClass());
	        final JAXBSource toValidate = new JAXBSource(jaxbContext, jaxbObject);        
			final Schema schema = SCHEMA_FACTORY.newSchema(getXsdFile()); 
		    final Validator validator = schema.newValidator();
		    validator.setErrorHandler(new ErrorHandlerImpl(objectName));
		    
			validator.validate(toValidate);
		} catch (HOOServiceException e) {
			throw e;
		} catch (Exception e) {
			LOGGER.log(Level.SEVERE, "Unexpected error while validating.", e);
			e.printStackTrace();
			throw new HOOServiceException("Unexpected error while validating.", e, HOOErrorType.UNEXPECTED, objectName);
		}
    }
	
	public static void setXsdFileLocation(String location1, String location2) 
	{
		if (location1 != null)  
		{
			try {
				URL url = Thread.currentThread().getContextClassLoader().getResource(location1);
				XSD_FILE = new File(url.toURI());
			} catch (Exception e) {
				// ignore this exception
				LOGGER.info("xsd file not found: " + location1);
			}
		}
		
		if (XSD_FILE == null && location2 != null)  
		{
			try {
				XSD_FILE = new File(location2);
			} catch (Exception e) {
				// ignore this exception
				LOGGER.info("xsd file not found: " + location1);
			}
		}
		
		if (XSD_FILE == null) {
			throw new HOOServiceException("XSD file not found in '" + location1 + "' and '" + location2 + "'.");
		}
		
	}
	
	private static File getXsdFile() throws FileNotFoundException 
	{
		if (XSD_FILE == null)  {
			throw new HOOServiceException("XSD file not defined!");
		}
		
		if ( ! XSD_FILE.exists() )  {
			throw new HOOServiceException("Defined XSD file does not exist: " + XSD_FILE.getAbsolutePath());
		}
		
		return XSD_FILE;
	}


    static class ErrorHandlerImpl implements ErrorHandler 
    {
    	private String objectName;
    	
        public ErrorHandlerImpl(String objectName) {
			this.objectName = objectName;
		}

		public void warning(SAXParseException spe) throws SAXException {
            throw new HOOServiceException(spe.getMessage(), HOOErrorType.MISSING_INPUT, objectName);
        }

        public void error(SAXParseException spe) throws SAXException {
            throw new HOOServiceException(spe.getMessage(), HOOErrorType.MISSING_INPUT, objectName);
        }

        public void fatalError(SAXParseException spe) throws SAXException {
            throw new HOOServiceException(spe.getMessage(), HOOErrorType.MISSING_INPUT, objectName);
        }
    }	
}